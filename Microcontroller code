#include "OTAHelper.h"
#include <WebServer.h>
#include <ArduinoJson.h>
#include <ESP32Servo.h>
#include <AccelStepper.h>

OTAHelper ota("realme 8i", "hdsdkysyh", "ritun", "ritun-esp32");
WebServer server(80);

// ----- Actuator Setup -----
const int numActuators = 2;
int actuatorStates[numActuators] = {0};  // 0: servo angle, 1: stepper speed

Servo myServo;
const int SERVO_PIN = 27;

#define MOTOR_INTERFACE_TYPE 4  // For 28BYJ-48 (ULN2003 driver)
AccelStepper stepper(MOTOR_INTERFACE_TYPE, 18, 17, 5, 19);  // IN1 to IN4

// ----- Sensor Output (Fake) -----
String getSensorData() {
  StaticJsonDocument<200> doc;
  doc["temperature"] = 25.1;
  doc["humidity"] = 60.2;
  String json;
  serializeJson(doc, json);
  return json;
}

// ----- /process API -----
void handleProcess() {
  if (!server.hasArg("plain")) {
    server.send(400, "application/json", "{\"error\":\"Missing JSON body\"}");
    return;
  }

  StaticJsonDocument<300> doc;
  DeserializationError error = deserializeJson(doc, server.arg("plain"));
  if (error) {
    server.send(400, "application/json", "{\"error\":\"Invalid JSON\"}");
    return;
  }

  JsonArray inputs = doc["input"].as<JsonArray>();
  for (int i = 0; i < numActuators && i < inputs.size(); i++) {
    actuatorStates[i] = inputs[i].as<int>();
  }

  // --- Control Actuators ---
  int angle = constrain(actuatorStates[0], 0, 180);
  myServo.write(angle);

  int stepperSpeed = constrain(actuatorStates[1], -1000, 1000);
  stepper.setSpeed(stepperSpeed);  // Speed in steps per second

  server.send(200, "application/json", getSensorData());
}

// ----- Minimal Frontend -----
void handleIndex() {
  String html = R"rawliteral(
    <!DOCTYPE html>
    <html>
    <head>
      <title>ESP32 Actuator Control</title>
      <style>
        body { background: #e3f2fd; color: #0d47a1; font-family: sans-serif; padding: 20px; max-width: 500px; margin: auto; }
        input, button { padding: 10px; width: 100%; margin-bottom: 10px; }
        .label { font-weight: bold; margin-top: 10px; }
        #output { margin-top: 15px; padding: 10px; background: #bbdefb; border-radius: 5px; }
      </style>
    </head>
    <body>
      <h2>ESP32 Motor Dashboard</h2>
      <div class="label">Servo Angle (0–180°)</div>
      <input type="number" id="act1" value="90">
      <div class="label">Stepper Speed (-1000 to 1000)</div>
      <input type="number" id="act2" value="200">
      <button onclick="send()">Send</button>
      <div id="output">Sensor output will appear here</div>

      <script>
        async function send() {
          const inputArray = [
            parseInt(document.getElementById('act1').value),
            parseInt(document.getElementById('act2').value)
          ];
          const response = await fetch('/process', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({input: inputArray})
          });
          const data = await response.json();
          document.getElementById('output').innerText = "Sensor Data:\n" + JSON.stringify(data, null, 2);
        }
      </script>
    </body>
    </html>
  )rawliteral";

  server.send(200, "text/html", html);
}

void setup() {
  Serial.begin(115200);
  ota.begin();

 // myServo.attach(SERVO_PIN);
//  myServo.write(90);  // Center the servo

  stepper.setMaxSpeed(1000);  // Optional limit
  stepper.setSpeed(200);      // Initial speed

  server.on("/", handleIndex);
  server.on("/process", HTTP_POST, handleProcess);
  server.begin();
 // Serial.println("Web server started. Use browser to control motors.");
}

void loop() {
  ota.handle();
  server.handleClient();
  stepper.runSpeed();  // Keep the stepper spinning
}
